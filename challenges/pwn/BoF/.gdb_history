run
ls
exit
n
run
exit
break main
run
n
x/s $rbp-8
x/s $rbp-12
x/s $rbp-13
x/x $rbp-12
x/4x $rbp-12
x/2x $rbp-12
x/16x $rbp-12
n
x/16x $rbp-12
n
x/16x $rbp-12
x/16x $rbp
x/x $rbp
x/gx $rbp
x/gx $rbp/12
x/gx $rbp-12
x/s *0xffffde080000006f
x/gx $rbp-16
x/gx $rbp
x/8gx $rbp
x/12gx $rbp
x/16gx $rbp

c
x/16gx $rbp
disassemble main
break *0x000000000040135b
run
c
x/16gx $rbp
run
c
x/16gx $rbp
c
run
run
c
x/16gx $rbp
c
n
run
c
x/16gx $rbp
c
exit
run
exit
break main
run
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
run
c
run
x/16gx $rbp
x/32gx $rbp
n
x/16gx $rbp
n
x/16gx $rbp
n
x/16gx $rbp
void printFlag(){

	FILE *flagFile = fopen("flag.txt", "r");
	
	//Allocate buffer size to read from file
	size_t buff_size = 1024;
	char *buff = (char *)malloc(buff_size);

	//Read the file contents into the buffer
	size_t bytes_read = fread(buff, 1, buff_size, flagFile);
	if (bytes_read != 0) {
		puts("Here is your flag: ");
		printf("%s", buff); //print content of the buffer/file
	}

	fclose(flagFile); //close file
	free(buff); //free memory occupied by the buffer
}

x/s *0x7fffffffdcd0
x/s 0x7fffffffdcd0
n
x/s 0x7fffffffdcd0
x/16gx $rbp
x/32gx $rbp
n
x/s 0x7fffffffdcd0
x/32gx $rbp
x/64gx $rb
x/s 0x7fffffffdcd0
n
x/16gx $rbp
x/16gx $rbp-12
x/16gx $rbp-16
n
x/16gx $rbp-16
break *0x401275
n
x/16gx $rbp-16
n
n
n
x/16gx $rbp-16
c
run
c
x/16gx $rbp-16
cc
c
eun
run
c
x/16gx $rbp-16
exit
break main
c
run
n
n
n
x/16gx $rbp-16
n
n
n
n
break *0x40131f
c
x/16gx $rbp-16
c
c
c
c
c
run
c
x/16gx $rbp-16
x/24gx $rbp-16
x/16gx $rbp-24
exit
break main
run
n
n
n
n
n
n
n
break *0x40131f
c
x/16gx $rbp-16
n
n
n
n
n
n
c
c
run
c
n
n
n
n
n
n
c
run
c
n
n
n
n
n
n
n
exit
break main
run
c
run
n
n
n
n
n
n
n
break *0x40131f
x/16gx $rsp-16
x/16gx $rsp-24
x/16gx $rsp-32
x/16gx $rsp-64
c
x/16gx $rsp-16
exit
break main
c
run
5n
n5
5ni
n
n
n
n
n
n
break *0x40131f
c
x/16x $rbp-16
exit
break main
run
n
n
n
n
n
n
n
n
n
n
n
break *0x401335
c
c
run
n
n
n
n
n
n
break *0x40131f
c
x/16x $rbp-16
c
n
run
c
x/16x $rbp-16
c
exit
